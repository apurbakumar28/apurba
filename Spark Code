
package example


object Lists {

  /**
    * This method computes the sum of all elements in the list xs. There are
    * 
    *
    *  - `xs.isEmpty: Boolean` returns `true` if the list `xs` is empty
    *  - `xs.head: Int` returns the head element of the list `xs`. If the list
    * is empty an exception is thrown
    *  - `xs.tail: List[Int]` returns the tail of the list `xs`, i.e. the the
    * list `xs` without its `head` element
    *
    * ''Hint:'' instead of writing a `for` or `while` loop, think of a recursive
    * solution.
    *
    * @param xs A list of natural numbers
    * @return The sum of all elements in `xs`
    */
  def sum(xs: List[Int]): Int = {
    if (xs.isEmpty == true) 0
      else xs.head + sum(xs.tail)
  }

  /**
    * If the
    * list `xs` is empty it throws a `java.util.NoSuchElementException`.
    *
    * You can use the same methods of the class `List` as mentioned above.
    *
    * ''Hint:'' Again, think of a recursive solution instead of using looping
    * constructs. You might need to define an auxiliary method.
    *
    * @param xs A list of natural numbers
    * @return The largest element in `xs`
    * @throws java.util.NoSuchElementException if `xs` is an empty list
    */
  def max(xs: List[Int]): Int = {
    if (xs.isEmpty == true) throw new java.util.NoSuchElementException()
      else maxrec(xs.tail, xs.head)
  }

  def maxrec(xs1: List[Int], Largest: Int): Int = {
    if (xs1.isEmpty != true) {
      if (xs1.head > Largest) {
        maxrec(xs1.tail, xs1.head)
      }
      else {
        maxrec(xs1.tail, Largest)
      }
    }
    else Largest
  }

}
++++++++++++++++++++===================================================================
Pascals Triangle
+++++++++++++++++++++=
package recfun

object Main {
  def main(args: Array[String]) {
    println("Pascal's Triangle")
    for (row <- 0 to 10) {
      for (col <- 0 to row)
        print(pascal(col, row) + " ")
      println()
    }
  }

  /**
   * Exercise 1
   */
    def pascal(c: Int, r: Int): Int = {
      if(c == 0 || c == r) 1
      else
        pascal(c-1,r-1) + pascal(c,r-1)
          }
  
  /**
   * Check the number of ( and whether the chars are closed or not
   */
    def balance(chars: List[Char]): Boolean = {
      def strikebal(chars: List[Char], count: Int): Boolean =
        if (chars.isEmpty) count == 0
        else if (count < 0) false
        else if (chars.head == '(') strikebal(chars.tail, count + 1)
        else if (chars.head == ')') strikebal(chars.tail, count - 1)
        else strikebal(chars.tail, count)

      strikebal(chars, 0)
    }
  
  /**
   * count the all possible ways to give change for a currency
   */
    def countChange(money: Int, coins: List[Int]): Int = {
      if (money == 0) 1
      else if (money < 0) 0
      else if (coins.isEmpty) 0
      else countChange(money - coins.head, coins) + countChange(money, coins.tail)
    }
  }

